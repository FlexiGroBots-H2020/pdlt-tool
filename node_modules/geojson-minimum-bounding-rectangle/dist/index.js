"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.smallestSurroundingRectangleByWidth = exports.smallestSurroundingRectangleByArea = void 0;
var convex_1 = __importDefault(require("@turf/convex"));
var meta_1 = require("@turf/meta");
var centroid_1 = __importDefault(require("@turf/centroid"));
var transform_rotate_1 = __importDefault(require("@turf/transform-rotate"));
var bearing_1 = __importDefault(require("@turf/bearing"));
var envelope_1 = __importDefault(require("@turf/envelope"));
var area_1 = __importDefault(require("@turf/area"));
var distance_1 = __importDefault(require("@turf/distance"));
function smallestSurroundingRectangleByArea(geoJsonInput) {
    var convexHull = convex_1.default(geoJsonInput);
    var centroidCoords = centroid_1.default(convexHull);
    var allHullCoords = meta_1.coordAll(convexHull);
    var minArea = Number.MAX_SAFE_INTEGER;
    var resultPolygon = null;
    for (var index = 0; index < allHullCoords.length - 1; index++) {
        var angle = bearing_1.default(allHullCoords[index], allHullCoords[index + 1]);
        var rotatedHull = transform_rotate_1.default(convexHull, -1.0 * angle, {
            pivot: centroidCoords,
        });
        var envelopeOfHull = envelope_1.default(rotatedHull);
        var envelopeArea = area_1.default(envelopeOfHull);
        if (envelopeArea < minArea) {
            minArea = envelopeArea;
            resultPolygon = transform_rotate_1.default(envelopeOfHull, angle, {
                pivot: centroidCoords,
            });
        }
    }
    return resultPolygon;
}
exports.smallestSurroundingRectangleByArea = smallestSurroundingRectangleByArea;
function smallestSurroundingRectangleByWidth(geoJsonInput) {
    var convexHull = convex_1.default(geoJsonInput);
    var centroidCoords = centroid_1.default(convexHull);
    var allHullCoords = meta_1.coordAll(convexHull);
    var minWidth = Number.MAX_SAFE_INTEGER;
    var resultPolygon = null;
    for (var index = 0; index < allHullCoords.length - 1; index++) {
        var angle = bearing_1.default(allHullCoords[index], allHullCoords[index + 1]);
        var rotatedHull = transform_rotate_1.default(convexHull, -1.0 * angle, {
            pivot: centroidCoords,
        });
        var envelopeOfHull = envelope_1.default(rotatedHull);
        var envelopeCoords = meta_1.coordAll(envelopeOfHull);
        if (envelopeCoords.length > 4) {
            var side1 = distance_1.default(envelopeCoords[0], envelopeCoords[1]);
            var side2 = distance_1.default(envelopeCoords[1], envelopeCoords[2]);
            var width = Math.min(side1, side2);
            if (width < minWidth) {
                minWidth = width;
                resultPolygon = transform_rotate_1.default(envelopeOfHull, angle, {
                    pivot: centroidCoords,
                });
            }
        }
    }
    return resultPolygon;
}
exports.smallestSurroundingRectangleByWidth = smallestSurroundingRectangleByWidth;
